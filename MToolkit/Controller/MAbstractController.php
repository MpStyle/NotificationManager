<?php

namespace MToolkit\Controller;

/*
 * This file is part of MToolkit.
 *
 * MToolkit is free software: you can redistribute it and/or modify
 * it under the terms of the LGNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MToolkit is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * LGNU Lesser General Public License for more details.
 *
 * You should have received a copy of the LGNU Lesser General Public License
 * along with MToolkit.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author  Michele Pagnin
 */

require_once __DIR__ . '/../Core/MObject.php';
require_once __DIR__ . '/MHttpResponse.php';
require_once __DIR__ . '/../Core/MDataType.php';

use MToolkit\Core\MObject;
use MToolkit\Core\MDataType;
use MToolkit\Controller\MControllerList;

/**
 * MAbstractController class provides a base methods for the controller classes. <br />
 * The base functionality is to be a container for other controls.
 */
abstract class MAbstractController extends MObject
{
    const SIGNAL_ADDED_CONTROL = 'SIGNAL_ADDED_CONTROL';
    const SIGNAL_REMOVED_CONTROL = 'SIGNAL_REMOVED_CONTROL';

    /**
     *
     * @var string
     */
    private $clientIdSeparator='_';
    
    /**
     * @var string
     */
    private $id=null;
    
    /**
     * @var string
     */
    private $ensureId=null;
    
    /**
     * @var MControllerList
     */
    private $controls = null;

    /**
     * @var MHttpResponse
     */
    private $httpResponse = null;

    /**
     * Constructs an abstract controller with the given <i>$parent</i>.
     * 
     * @param MObject $parent
     */
    public function __construct( MAbstractController $parent = null )
    {
        parent::__construct( $parent );

        $this->httpResponse = new MHttpResponse();
        $this->controls = new MControllerList();
        $this->ensureId=  uniqid("Control_");
        
        $this->setId($this->ensureId);
    }

    /**
     * Encapsulates HTTP-response information from an PHP operation.
     * 
     * @return MHttpResponse
     */
    public function getHttpResponse()
    {
        return $this->httpResponse;
    }

    /**
     * Searches the current naming container for a server control with the specified <i>$id</i> parameter.
     * 
     * @param string $id
     * @return MAbstractViewController
     */
    protected function &findControl( $id )
    {
        MDataType::mustBeString( $id );

        foreach( $this->controls as /* @var $control MAbstractController */ $control )
        {
            if( $control->getId() == $id )
            {
                return $control;
            }
        }

        return null;
    }

    /**
     * Returns all the controls.
     * 
     * @return MControllerList
     */
    public function &getControls()
    {
        return $this->controls;
    }
    
    /**
     * @return MAbstractController
     */
    public function getParent()
    {
        return parent::getParent();
    }

    /**
     * The <i>$clientID</i> value is generated by concatenating the <i>$id</i> 
     * value of the control and the <i>$uniqueId</i> value of its parent control. 
     * Each part of the generated <i>$id</i> property is separated by the 
     * <i>$clientIdSeparator</i> property value. The value always returns an 
     * underscore (_).
     * 
     * @return string
     */
    public function getClientIdSeparator()
    {
        return $this->clientIdSeparator;
    }
    
    /**
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @param string $id
     * @return \MToolkit\Controller\MAbstractController
     */
    public function setId( $id )
    {
        $this->id = $id;
        return $this;
    }
    
    /**
     * @return string
     */
    public function getUniqueId()
    {
        if( $this->getParent()==null )
        {
            return $this->getId();
        }
        
        return $this->getParent()->getId() . '$' . $this->getId();
    }
    
    /**
     * @return string
     */
    public function getClientId()
    {
        if( $this->getParent()==null )
        {
            return $this->getId();
        }
        
        return $this->getParent()->getId() . $this->getClientIdSeparator() . $this->getId();
    }
    
    /**
     * @return string
     */
    public function getEnsureId()
    {
        return $this->ensureId;
    }
    
    public function __set( $name, $value )
    {
        switch( $name )
        {
            case 'id':
                $this->setId( $value );
                break;
            default:
                parent::__set( $name, $value );
                break;
        }
    }
}
